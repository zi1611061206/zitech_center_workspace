# Lessons Learned for Zi Coder Agent

## Purpose
This document captures project-specific learning, patterns, and preferences to facilitate continuous improvement in the development process of Zi Coder Agent. It serves as a reflective resource for the team to optimize workflows and avoid past pitfalls.

## Key Learnings
- **Documentation Importance**: Early setup of comprehensive documentation using tools like MkDocs proves invaluable for project clarity, team onboarding, and maintaining a shared understanding of project goals and architecture.
- **Environment Setup Challenges**: Addressing PATH issues and virtual environment configurations early prevents significant delays in development workflows, especially when tools like MkDocs or Flask are installed in isolated environments.
- **Modular Architecture Benefits**: Implementing a modular design from the start has facilitated independent component development (e.g., API Server, Model Management), making debugging and updates more manageable.
- **Asynchronous Processing Value**: Leveraging Celery for asynchronous tasks has been critical in maintaining API responsiveness during intensive AI computations, highlighting the importance of planning for scalability early.
- **Dependency Management**: Using `pyproject.toml` with tools like `uv` or `pip` for dependency management has streamlined environment setup across different operating systems, reducing version conflict issues.

## Patterns and Preferences
- **Modular Documentation Structure**: Organizing documentation by project components (e.g., architecture, technical specs, tasks) aids in maintaining focus, clarity, and quick reference for specific areas, enhancing team efficiency.
- **Iterative Documentation Updates**: Regularly updating documentation to reflect current project status, even during active development phases, prevents knowledge gaps and ensures new contributors can quickly get up to speed.
- **Pre-Commit Hooks for Quality**: Enforcing code quality through pre-commit hooks (using tools like `black`, `isort`, and `pylint`) has proven effective in maintaining consistent coding standards without manual overhead.
- **Cross-Platform Considerations**: Prioritizing cross-platform compatibility in command examples and setup instructions (e.g., providing Windows, macOS, and Linux variants) minimizes environment-specific errors and broadens accessibility.
- **Early Testing Integration**: Setting up a testing framework with `pytest` from the project's outset ensures that components like the API server and database interactions are reliable before full integration, saving debugging time later.

*Note: This document will be continuously updated with additional lessons learned, refined best practices, and evolving preferences as the project progresses through development phases. Team input is encouraged to enrich this knowledge repository.*
